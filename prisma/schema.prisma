// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// npx prisma migrate dev --name our_migration_note_here
// npx prisma db push --force-reset  to reset databae

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Authentication {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accessToken  String  @unique
  refreshToken String  @unique
  student      Student @relation(fields: [studentId], references: [id])
  studentId    Int     @unique
}

model College {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logoLink String?
  name     String  @unique
  nickname String? @unique

  students StudentColleges[]
}

model CoursePage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category          String
  pageContent       String?
  pillar            CoursePillar @relation(fields: [pillarId], references: [id])
  pillarId          Int
  positionInSection Int
  title             String
  videoLink         String?

  examples         Example[]
  reviews          Review[]
  studentsProgress StudentProgress[]
  questions        Question[]

  @@unique([pillarId, title], name: "coursePageId")
  @@unique([pillarId, positionInSection], name: "coursePagePillarPositionInSection")
}

model CoursePillar {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String @unique
  order Int

  coursePages CoursePage[]
}

model Example {
  id               Int        @id @default(autoincrement())
  creator          Student    @relation(fields: [creatorStudentId], references: [id])
  creatorStudentId Int
  coursePage       CoursePage @relation(fields: [coursePageId], references: [id])
  coursePageId     Int
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  example String
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rating   Int
  question String?
  feedback String?

  coursePage   CoursePage @relation(fields: [coursePageId], references: [id])
  coursePageId Int
  student      Student    @relation(fields: [studentId], references: [id])
  studentId    Int

  @@unique([id, coursePageId, studentId], name: "idCoursePageIdStudentId")
}

model Student {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName String?
  lastName  String?
  password  String
  program   String?
  username  String  @unique

  authentication   Authentication[]
  colleges         StudentColleges[]
  examples         Example[]
  reviews          Review[]
  studentsProgress StudentProgress[]
  questions        Question[]
}

model StudentColleges {
  college   College  @relation(fields: [collegeId], references: [id])
  collegeId Int
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  choice Int?

  @@id([collegeId, studentId])
}

model StudentProgress {
  coursePage   CoursePage @relation(fields: [coursePageId], references: [id])
  coursePageId Int
  student      Student    @relation(fields: [studentId], references: [id])
  studentId    Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  answer   String?
  complete Boolean @default(false)
  notes    String?

  @@id([coursePageId, studentId])
}

model Question {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question String

  coursePage   CoursePage @relation(fields: [coursePageId], references: [id])
  coursePageId Int
  student      Student    @relation(fields: [studentId], references: [id])
  studentId    Int

  @@unique([id, coursePageId, studentId], name: "idCoursePageIdStudentId")
}
