// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model College {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logoLink String?
  name     String  @unique
  nickname String  @unique

  students StudentColleges[]
}

model Curriculum {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content                 String?
  lectureLink             String?
  pageLink                String
  positionInSequence      Int
  section                 String
  title                   String
  titleForTableOfContents String

  curriculumExamples CurriculumExample[]
  students           StudentProgressOnCurriculum[]

  @@unique([pageLink, section, title])
}

model CurriculumExample {
  id               Int        @id @default(autoincrement())
  creator          Student    @relation(fields: [creatorStudentId], references: [id])
  creatorStudentId Int
  curriculum       Curriculum @relation(fields: [curriculumId], references: [id])
  curriculumId     Int
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  example String
}

model Student {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName String?
  lastName  String?
  program   String?
  username  String  @unique

  colleges           StudentColleges[]
  curriculum         StudentProgressOnCurriculum[]
  curriculumExamples CurriculumExample[]
}

model StudentColleges {
  college   College  @relation(fields: [collegeId], references: [id])
  collegeId Int
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  choice Int

  @@id([collegeId, studentId])
}

model StudentProgressOnCurriculum {
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id])
  curriculumId Int
  student      Student    @relation(fields: [studentId], references: [id])
  studentId    Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  answer   String?
  complete Boolean @default(false)
  notes    String?

  @@id([curriculumId, studentId])
}
